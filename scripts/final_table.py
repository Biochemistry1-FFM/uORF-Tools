#!/usr/bin/env python
'''This script takes 2 input csv files generated by xtail_normalized_counts.R, 
(one for uORFs and one for CDS) and creates a new data frame containing information 
on regulatory uORFs and their associated mainORF.
'''

import pandas as pd
import re
import argparse
import numpy as np

# read in xtail output files
def create_table(name):
    df = pd.read_table(name, sep = ",", index_col = 0)
    df = df[["log2FC_TE_final", "pvalue_final", "pvalue.adjust"]]
    return df

# etract transcript ids form uORF ids
def ids(uORFs):
	ids = []
	for i in uORFs.index.values:
		short = re.findall('(.*\.[0-9]*)\.', i)
		ids.append(short[0])
	uORFs['transcript_id'] = ids
	return uORFs

# merge both data frames by transcript id
def merge(uORFs, cds):
	df_merge = pd.merge(uORFs, cds, how = "left", left_on = "transcript_id", right_index = True, suffixes = ("_uORF", "_CDS") )
	df_merge.reset_index(level=0, inplace=True)
	df_merge.rename(columns = {"index":"uORF_id"}, inplace = True)
	return df_merge

# determine "direction of regulation"
def label(row):
	if row["log2FC_TE_final_uORF"] < 0 and row["log2FC_TE_final_CDS"] < 0: return("-,-")
	elif row["log2FC_TE_final_uORF"] > 0 and row["log2FC_TE_final_CDS"] > 0: return("+,+")
	elif row["log2FC_TE_final_uORF"] > 0 and row["log2FC_TE_final_CDS"] < 0: return("+,-")
	elif row["log2FC_TE_final_uORF"] < 0 and row["log2FC_TE_final_CDS"] > 0: return("-,+")
	else:
		return(None)

# create output data frame
def create_output(args):
	cds = create_table(args.xtail_cds_file)
	uORFs = create_table(args.xtail_uORF_file)
	uORFs = ids(uORFs)
	df_merge = merge(uORFs, cds)
	df_merge["direction"] = df_merge.apply(lambda row: label(row), axis = 1)
	annot = pd.read_table(args.uORF_annotation, sep =",", index_col = 0)
	annot.drop(columns = ["chromosome", "start", "stop", "strand", "gene_id", "strand", "ORF_length", "transcript_id"], axis = 1, inplace = True)
	df_merge = pd.merge(df_merge, annot, how = "left", left_on = "uORF_id", right_on = "uORFids")
	df_merge.drop(columns = ["uORFids"], axis = 1, inplace = True)
	return(df_merge)

def main():
    # store commandline args
    parser = argparse.ArgumentParser(description='Merges xtail differential analysis of translation efficiency of uORFs and their associated mainORF.')
    parser.add_argument('--xtail_cds_file', metavar='xtail_TE', help='Path to csv file generated by xtail_normalized_counts.R on CDS')
    parser.add_argument('--xtail_uORF_file', metavar='xtail_TE', help='Path to csv file generated by xtail_normalized_counts.R on uORFs')
    parser.add_argument("--uORF_annotation", help='Path to csv file containing uORF annotation')
    parser.add_argument("--output_csv_filepath", help='Path to write \
                        merged csv output')
    args = parser.parse_args()
    df_final = create_output(args)
    df_final.to_csv(args.output_csv_filepath, index = False, na_rep = 'NA', sep = "\t")

if __name__ == '__main__':
    main()
