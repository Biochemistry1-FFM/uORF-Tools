
'''This script takes n number of input files generated by ribotaper and creates a new data frame containing only the uORF information. The input must be in the form <file1> <file2> <file3> ... . The resulting data frame is stored as csv file'''

import pandas as pd 
import re
import sys

# store commandline args
input_args = sys.argv

# function to read in ribotaper output files ORFs_max_filt
def create_table(name):
	df = pd.read_table(name)
	return df

# function to select only uORFs
def keep_uORFs(df):
	df = create_table(df)
	df_uORFs = df[df["category"] == "uORF"]
	return df_uORFs

# function to keep only certain columns
def drop_cols(df_uORFs):
	df_uORFs = keep_uORFs(df_uORFs)
	df_dropped = df_uORFs[["gene_id", "gene_symbol", "transcript_id", "strand", "ORF_id_gen"]]
	return df_dropped

# function to get chromosome name
def chrom_name(column):			
	chrom = []
	for i in column:
		match = re.findall("chr[0-9MXY]+", i)
		for a in match:
			chrom.append(a)
	return chrom

# function to get start position
def start(column):			
	start = []
	for i in column:
		match = re.findall("_(.+)_", i)
		for a in match:
			start.append(a)
	return start

# function to get stop position
def stop(column):			
	stop = []
	for i in column:
		match = re.findall("_([0-9]+)$", i)
		for a in match:
			stop.append(a)
	return stop

# function to create final data frame
def output():
	# create empty data frame to append to later
	df_final = pd.DataFrame()

	# Create data frame from all input files
	for name in input_args[1:]:
		df_sub = drop_cols(name)
		df_final = df_final.append(df_sub)

	# Cleaning up data frame
	df_final.drop_duplicates(subset = "ORF_id_gen", inplace = True)
	df_final.reset_index(inplace = True)			
	df_final.drop(["index"], axis = 1, inplace = True)

	# add chromosome, start, and stop positions as columns to data frames
	df_final["chromosome"] = chrom_name(df_final["ORF_id_gen"])		
	df_final["start"] = start(df_final["ORF_id_gen"])
	df_final["stop"] = stop(df_final["ORF_id_gen"])

	return df_final

output = output()
		
# write output to csv file
output.to_csv("../analysis/output_ribotaper/Merged_uORF_results.csv")

if '__name__' == '__main__':
	main()


